// Server-side code using Node.js and Express
const express = require('express');
const bodyParser = require('body-parser');
const twilio = require('twilio'); // Twilio package for sending SMS

const app = express();
const client = twilio('TWILIO_ACCOUNT_SID', 'TWILIO_AUTH_TOKEN');

// Replace 'TWILIO_ACCOUNT_SID' and 'TWILIO_AUTH_TOKEN' with your Twilio credentials

// Store temporary OTPs and phone numbers (In production, use a database)
const otpStore = {};

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Route to initiate phone number verification
app.post('/signup', (req, res) => {
  const phoneNumber = req.body.phoneNumber;
  const otp = generateOTP(); // Function to generate a random OTP (e.g., 6 digits)
  otpStore[phoneNumber] = otp; // Store the OTP associated with the phone number

  // Send OTP via SMS using Twilio
  client.messages
    .create({
      body: `Your OTP is: ${otp}`,
      from: 'TWILIO_PHONE_NUMBER', // Replace with your Twilio phone number
      to: phoneNumber,
    })
    .then((message) => {
      console.log(message.sid);
      res.status(200).json({ message: 'OTP sent successfully' });
    })
    .catch((error) => {
      console.error(error);
      res.status(500).json({ error: 'Failed to send OTP' });
    });
});

// Route to verify the received OTP
app.post('/verify', (req, res) => {
  const phoneNumber = req.body.phoneNumber;
  const otp = req.body.otp;

  if (otpStore[phoneNumber] && otpStore[phoneNumber] === otp) {
    // If the OTP matches, mark the user as verified
    delete otpStore[phoneNumber]; // Remove the OTP from the store after verification
    res.status(200).json({ message: 'OTP verified successfully' });
  } else {
    res.status(400).json({ error: 'Invalid OTP' });
  }
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});
